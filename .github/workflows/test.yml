name: Action-Test # name 指定這個 action 的名稱，它會在 github actions 的頁面顯示
description: "Action's Description"
author: JTt Ninja Code # action 的作者



on: # 指定何種事件發生時觸發 action，一個檔案裡面只會有一個 on，接著底下都是指這個 action 的觸發條件
  workflow_dispatch: # 可手動觸發
# push:
#   branches: [ main ]  # 當 main 被 push 時觸發
# pull_request:
#   branches: [ main ] # 當 main 被送 PR 時觸發

# 一個 jobs 跑在一個 runner 上
# jobs 各自是並行的執行，但如果使用 needs，就可以變成循序的執行
jobs:
  build_on_linux: # jobs 的名稱，自由命名
    runs-on: ubuntu-latest # 指定 runner 的 image 是 ubuntu-latest
    # steps 表示要在這台 container 內執行哪些動作，以底下寫的順序循序執行
    steps:
      - name: Run a one-line script
        run: echo "Hello, world!" # 要跑的指令
      - name: Run a multi-line script
        run: |
          echo "Hello1"
          echo "Hello2"
          date
  build_on_windows: # jobs 的名稱，自由命名
    runs-on: windows-latest # 跑在 windows 上
    steps:
      - name: run multi-line script
        run: | # 接上 | 代表底下多行都是要執行的指令
          echo "Hello1"
          echo "Hello2"
          Get-Date
  after_build_on_linux:
    runs-on: ubuntu-latest
    needs: build_on_linux # 使用 needs 就可以讓 build_on_linux 執行完以後才接著執行 build_on_windows
    steps:
    - name: Run a multi-line script
      run: |
        echo "After build on linux"
        date
  after_build_on_linux_windows:
    runs-on: ubuntu-latest
    needs: [ build_on_linux, build_on_windows ] # 要 build_on_linux, build_on_windows 都執行完，才跑此 job
    steps:
    - name: Run a multi-line script and Send mail
      run: |
        echo "After build on linux and windows"
        date
        echo "server url:${{ github.server_url }}"
        echo "repository name: ${{ github.repository }}"
        echo "full url: Repository URL is ${{ github.server_url }}/${{ github.repository }}"
        git clone "${{ github.server_url }}/${{ github.repository }}"
        REPO_NAME=$(basename ${{ github.repository }})
        cd $REPO_NAME
        python3 mail.py --subject "Test Subject" --body "This is the email body" --sender $EMAIL_SENDER --password $EMAIL_PASSWORD --recipients $EMAIL_RECEIVER
# echo "${{ github.repository }}" 印出 repo 的名稱
# echo "${{ github.server_url }}" 印出 github 的 url
# REPO_NAME=$(basename ${{ github.repository }}) 命名一個 env，名稱是 github.repository 的後面名稱，要取得這名稱可透過 basename 這個指令
      env: # 跑這個 job 時，系統的環境變數是甚麼? 使用 key:value 表示，這在 repo->setting->secrets and env 設定
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }} # 引用 GitHub Secrets
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }} # 引用 GitHub Secrets
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }} # 引用 GitHub Secrets
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITHUB_TOKEN 是特例，不需要去 setting，本身就會必定帶有此變數
          # 這變數的用途是:

# action 的 icon 圖示
branding:
  icon: 'award'
  color: 'green'
